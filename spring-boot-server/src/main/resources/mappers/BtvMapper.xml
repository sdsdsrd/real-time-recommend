<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tv.springbootserver.dao.BtvDao">
    <select id="getLog" resultType="com.tv.springbootserver.dto.LogDto">
        SELECT *
        FROM live_log
    </select>

    <select id="getTopGenre" parameterType="Map" resultType="com.tv.springbootserver.dto.TopGenreDto">
        select genre, sum(running_time) as running_time
        from (select title, genre, running_time
        from (select title, case when running_time <![CDATA[<=]]> 1800 then running_time else 300 end as running_time
        from (
        select title, time_to_sec(timediff(lead(device_base_time) over(order by device_base_time), device_base_time)) as running_time
        from (
        select *
        from live_log
        where stb_id = #{stbId}
        and ((device_base_time between #{twoWeekAgoFrom} and #{twoWeekAgoTo})
        or (device_base_time between #{oneWeekAgoFrom} and #{oneWeekAgoTo}))
        ) as select_log) as title_sum_of_time) as title_running_time
        left join title_full_genre
        on title_running_time.title = title_full_genre.title_full) as title_genre_running_time
        group by genre
        order by sum(running_time) desc
        limit 0,2;
    </select>

    <select id="getEpsdIdList" parameterType="Map" resultType="string">
        select epsd_id
        from (select genre, sum(running_time)
        from (select title, genre, running_time
        from (select title, case when running_time <![CDATA[<=]]> 1800 then running_time else 300 end as running_time
        from (
        select title, time_to_sec(timediff(lead(device_base_time) over(order by device_base_time), device_base_time)) as running_time
        from (
        select *
        from live_log
        where stb_id = #{stbId}
        and ((device_base_time between #{twoWeekAgoFrom} and #{twoWeekAgoTo})
        or (device_base_time between #{oneWeekAgoFrom} and #{oneWeekAgoTo}))
        ) as select_log) as title_sum_of_time) as title_running_time
        left join title_full_genre
        on title_running_time.title = title_full_genre.title_full) as title_genre_running_time
        group by genre
        order by sum(running_time) desc
        limit 0,2) as genre_sum_running_time
        left join epsd_id_genre
        on genre_sum_running_time.genre = epsd_id_genre.genre;

    </select>
</mapper>